// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Prefix from "./Prefix.res.js";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Caml_splice_call from "@rescript/std/lib/es6/caml_splice_call.js";

function levelToValue(level) {
  switch (level) {
    case "VERBOSE" :
        return 1;
    case "DEBUG" :
        return 2;
    case "INFO" :
        return 3;
    case "WARN" :
        return 4;
    case "ERROR" :
        return 5;
    case "TRACE" :
        return 6;
    
  }
}

function levelFromString(str) {
  var match = str.toUpperCase();
  switch (match) {
    case "DEBUG" :
        return "DEBUG";
    case "ERROR" :
        return "ERROR";
    case "INFO" :
        return "INFO";
    case "TRACE" :
        return "TRACE";
    case "VERBOSE" :
        return "VERBOSE";
    case "WARN" :
        return "WARN";
    default:
      return ;
  }
}

function levelToString(level) {
  switch (level) {
    case "VERBOSE" :
        return "VERBOSE";
    case "DEBUG" :
        return "DEBUG";
    case "INFO" :
        return "INFO";
    case "WARN" :
        return "WARN";
    case "ERROR" :
        return "ERROR";
    case "TRACE" :
        return "TRACE";
    
  }
}

var globalLogLevel = {
  contents: undefined
};

function getEffectiveLevel(loggerLevel) {
  var globalLevel = globalLogLevel.contents;
  if (globalLevel !== undefined) {
    return globalLevel;
  } else {
    return loggerLevel;
  }
}

function _log(logger, typeLevel, msg) {
  var effectiveLoggerLevel = getEffectiveLevel(logger.level);
  if (levelToValue(typeLevel) < levelToValue(effectiveLoggerLevel)) {
    return ;
  }
  var logFn;
  switch (typeLevel) {
    case "WARN" :
        logFn = (function (prim) {
            Caml_splice_call.spliceApply(console.warn, [prim]);
          });
        break;
    case "ERROR" :
        logFn = (function (prim) {
            Caml_splice_call.spliceApply(console.error, [prim]);
          });
        break;
    default:
      logFn = (function (prim) {
          Caml_splice_call.spliceApply(console.log, [prim]);
        });
  }
  var prefix = Prefix.prefixFn(levelToString(typeLevel), logger.name);
  var isNullish = (msg == null || msg == undefined);
  if (isNullish) {
    var label = (msg === undefined ? 'undefined' : 'null');
    return logFn([
                prefix,
                label
              ]);
  }
  var _n = msg.length;
  if (_n !== 0) {
    if (_n !== 1) {
      return logFn([prefix].concat(msg));
    } else {
      return logFn([
                  prefix,
                  Belt_Array.getExn(msg, 0)
                ]);
    }
  } else {
    return logFn([prefix]);
  }
}

function make(name, levelOpt, param) {
  var level = levelOpt !== undefined ? levelOpt : "DEBUG";
  return {
          name: name,
          level: Belt_Option.getWithDefault(levelFromString(level), "DEBUG")
        };
}

function log(logger, msg) {
  _log(logger, "INFO", msg);
}

function info(logger, msg) {
  _log(logger, "INFO", msg);
}

function warn(logger, msg) {
  _log(logger, "WARN", msg);
}

function error(logger, msg) {
  _log(logger, "ERROR", msg);
}

function debug(logger, msg) {
  _log(logger, "DEBUG", msg);
}

function verbose(logger, msg) {
  _log(logger, "VERBOSE", msg);
}

function trace(logger, msg) {
  _log(logger, "TRACE", msg);
}

var ConsoleLoggerInternal = {
  make: make,
  log: log,
  info: info,
  warn: warn,
  error: error,
  debug: debug,
  verbose: verbose,
  trace: trace
};

function make$1(name, levelOpt, param) {
  var level = levelOpt !== undefined ? levelOpt : "DEBUG";
  return make(name, level, undefined);
}

function info$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  info(defaultLogger, msg);
}

function warn$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  warn(defaultLogger, msg);
}

function error$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  error(defaultLogger, msg);
}

function debug$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  debug(defaultLogger, msg);
}

function verbose$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  verbose(defaultLogger, msg);
}

function log$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  log(defaultLogger, msg);
}

function trace$1(msg) {
  var defaultLogger = make$1("default", "VERBOSE", undefined);
  trace(defaultLogger, msg);
}

export {
  levelToValue ,
  levelFromString ,
  levelToString ,
  ConsoleLoggerInternal ,
  make$1 as make,
  info$1 as info,
  warn$1 as warn,
  error$1 as error,
  debug$1 as debug,
  verbose$1 as verbose,
  log$1 as log,
  trace$1 as trace,
}
/* No side effect */
